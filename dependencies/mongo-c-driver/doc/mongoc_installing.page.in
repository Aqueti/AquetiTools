<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="installing">
  <info><link type="guide" xref="index#installation" /></info>
  <title>Installing the MongoDB C Driver</title>

  <p>The following guide will step you through the process of downloading, building, and installing the current release of the MongoDB C Driver.</p>

  <section id="supported-platforms">
    <info><link type="guide" xref="index#installation" /></info>

    <title>Supported Platforms</title>

    <p>The MongoDB C Driver is <link href="https://evergreen.mongodb.com/waterfall/mongo-c-driver">continuously tested</link> on variety of platforms including:</p>

    <table>
      <tr>
        <td><title>Operating Systems</title></td>
        <td><title>CPU Architectures</title></td>
        <td><title>Compiler Toolchain</title></td>
      </tr>
      <tr>
        <td>
          <list>
            <item><p>GNU/Linux</p></item>
            <item><p>Solaris</p></item>
            <item><p>Mac OS X</p></item>
            <item><p>Microsoft Windows</p></item>
          </list>
        </td>
        <td>
          <list>
            <item><p>x86 and x86_64</p></item>
            <item><p>ARM</p></item>
            <item><p>PPC</p></item>
            <item><p>SPARC</p></item>
            <item><p>aarch64</p></item>
            <item><p>s390x</p></item>
            <item><p>ppc64le</p></item>
          </list>
        </td>
        <td>
          <list>
            <item><p>GCC 4.1 and newer</p></item>
            <item><p>Clang 3.3 and newer</p></item>
            <item><p>Microsoft Visual Studio 2010 and newer</p></item>
            <item><p><link href="http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/index.html">Oracle Solaris Studio 12</link></p></item>
            <item><p>MinGW</p></item>
          </list>
        </td>
      </tr>
    </table>

    <p>The driver is also known to work on FreeBSD, and should work on any POSIX compatible platform with a working c89 (or later) compiler.</p>

  </section>

  <section id="package-manager">
    <info><link type="guide" xref="index#installation" /></info>
    <title>Install with a Package Manager</title>
    <p>The libmongoc package is available on recent versions of Debian and Ubuntu.</p>
    <screen><output style="prompt">$ </output><input>apt-get install libmongoc-1.0-0</input></screen>
    <p>For RedHat-like systems, use Remi Collet's well-maintained RPMs. Commands to enable Remi's repository and install libmongoc depend on your exact system. For example, on CentOS 6:</p>
    <screen><output style="prompt">$ </output><input>yum install http://rpms.remirepo.net/enterprise/remi-release-6.rpm</input>
<output style="prompt">$ </output><input>yum install yum-utils</input>
<output style="prompt">$ </output><input>yum-config-manager --enable remi</input>
<output style="prompt">$ </output><input>yum update</input>
<output style="prompt">$ </output><input>yum install mongo-c-driver</input></screen>
    <p>The <link href="http://rpms.remirepo.net/wizard/">Configuration Wizard for Remi's RPM Repository</link> generates detailed instructions for your system.</p>
  </section>

  <section id="installing-unix">
    <info><link type="guide" xref="index#installation" /></info>
    <title>Building on Unix</title>
    <section id="unix-prerequisites">
      <title>Prerequisites</title>
      <p>OpenSSL is required for authentication or for SSL connections to MongoDB. Kerberos or LDAP support requires Cyrus SASL.</p>
        <p>To install all optional dependencies on RedHat / Fedora:</p>
        <screen>$ sudo yum install pkg-config openssl-devel cyrus-sasl-devel</screen>
        <p>On Debian / Ubuntu:</p>
        <screen>$ sudo apt-get install pkg-config libssl-dev libsasl2-dev</screen>
        <p>On FreeBSD:</p>
        <screen>$ su -c 'pkg install pkgconf openssl cyrus-sasl2'</screen>
    </section>
    <section id="unix-build">
      <title>Building from a release tarball</title>
      <p>Unless you intend on contributing to the mongo-c-driver, you will want to build from a release tarball.</p>
      <p>The most recent release of libmongoc is @MONGOC_RELEASED_VERSION@ and can be <link href="https://github.com/mongodb/mongo-c-driver/releases/download/@MONGOC_RELEASED_VERSION@/mongo-c-driver-@MONGOC_RELEASED_VERSION@.tar.gz">downloaded here</link>. The following snippet will download and extract the driver, and configure it:</p>

      <screen>
$ wget https://github.com/mongodb/mongo-c-driver/releases/download/@MONGOC_RELEASED_VERSION@/mongo-c-driver-@MONGOC_RELEASED_VERSION@.tar.gz
$ tar xzf mongo-c-driver-@MONGOC_RELEASED_VERSION@.tar.gz
$ cd mongo-c-driver-@MONGOC_RELEASED_VERSION@
$ ./configure
      </screen>
      <p>If <code>configure</code> completed successfully, you'll see something like the following describing your build configuration.</p>
    <screen>libmongoc was configured with the following options:

Build configuration:
Enable debugging (slow)                          : no
Compile with debug symbols (slow)                : no
Enable GCC build optimization                    : yes
Enable automatic binary hardening                : yes
Code coverage support                            : no
Cross Compiling                                  : no
Fast counters                                    : no
SASL                                             : sasl2
SSL                                              : yes
Libbson                                          : bundled

Documentation:
Generate man pages                               : no
Install man pages                                : no</screen>
      <p>mongo-c-driver contains a copy of libbson, in case your system does not already have libbson installed. The configure script will detect if libbson is not installed and use the bundled libbson.</p>
      <screen>
$ make
$ sudo make install
      </screen>
    </section>
    <section id="unix-build-git">
      <title>Building from git</title>
      <p>To build an unreleased version of the driver from git requires additional dependencies.</p>
      <p>RedHat / Fedora:</p>
      <screen>$ sudo yum install git gcc automake autoconf libtool</screen>
      <p>Debian / Ubuntu:</p>
      <screen>$ sudo apt-get install git gcc automake autoconf libtool</screen>
      <p>FreeBSD:</p>
      <screen>$ su -c 'pkg install git gcc automake autoconf libtool'</screen>
      <p>Once you have the dependencies installed, clone the repository and build the current master or a particular release tag:</p>
      <screen>$ git clone https://github.com/mongodb/mongo-c-driver.git
$ cd mongo-c-driver
$ git checkout x.y.z  # To build a particular release
$ ./autogen.sh --with-libbson=bundled
$ make
$ sudo make install
      </screen>
    </section>
    <section id="unix-build-docs">
      <title>Generating the documentation</title>
      <p>Install the <code>yelp-tools</code> and <code>yelp-xsl</code> packages, then:</p>
      <screen>$ ./configure --enable-html-docs --enable-man-pages
$ make man html</screen>
    </section>
  </section>

  <section id="installing-osx">
    <info><link type="guide" xref="index#installation" /></info>
    <title>Building on Mac OS X</title>
    <section id="prerequisites-osx">
      <title>Prerequisites</title>
      <section id="gcc-osx">
        <title>XCode Command Line Tools</title>
        <p>To install the XCode Command Line Tools, just type <code>xcode-select --install</code> in the Terminal and follow the instructions.</p>
      </section>
      <section id="openssl-el-capitan">
        <title>OpenSSL support on El Capitan</title>
        <p>Beginning in OS X 10.11 El Capitan, OS X no longer includes the OpenSSL headers. To build the driver with SSL on El Capitan and later, first <link href="http://brew.sh/">install Homebrew according to its instructions</link>, then:</p>
        <screen>
$ brew install openssl
$ export LDFLAGS="-L/usr/local/opt/openssl/lib"
$ export CPPFLAGS="-I/usr/local/opt/openssl/include"</screen>
      </section>
    </section>
    <section id="nativetls-macos">
      <title>Native TLS Support on Mac OS X / Darwin (Secure Transport)</title>
      <p>
	The MongoDB C Driver supports the Darwin native TLS and crypto libraries.
	Using the native libraries there is no need to install OpenSSL. By
	default however, the driver will compile against OpenSSL if it
	detects it being available. If OpenSSL is not available, it will
	fallback on the native libraries.
      </p>
      <p>
	To compile against the Darwin native TLS and crypto libraries, even when
	OpenSSL is available, configure the driver like so:
      </p>
      <screen>
$ ./configure --enable-ssl=darwin
      </screen>
    </section>
    <section id="building-osx">
      <title>Building on OS X</title>
      <p>Download the latest release tarball:</p>
      <screen>
$ curl -LO https://github.com/mongodb/mongo-c-driver/releases/download/@MONGOC_RELEASED_VERSION@/mongo-c-driver-@MONGOC_RELEASED_VERSION@.tar.gz
$ tar xzf mongo-c-driver-@MONGOC_RELEASED_VERSION@.tar.gz
$ cd mongo-c-driver-@MONGOC_RELEASED_VERSION@</screen>
      <p>Build and install the driver:</p>
      <screen>
$ ./configure
$ make
$ sudo make install</screen>
    </section>
    <section id="build-docs-osx">
      <title>Generating the documentation on OS X</title>
      <p>Homebrew is required to generate the driver's HTML documentation and man pages:</p>
      <screen>$ brew install yelp-xsl yelp-tools
$ ./configure --enable-html-docs --enable-man-pages
$ make man html</screen>
    </section>
  </section>

  <section id="mac-os-x">
    <info><link type="guide" xref="index#installation"/></info>
    <title>Installing on Mac OS X</title>
    <p>To build the C Driver on a Mac, install the prerequisites in order to build it from source. It is recommended to use <link href="http://brew.sh">Homebrew</link>:</p>
    <screen><output style="prompt">$ brew install automake autoconf libtool pkgconfig</output></screen>
    <p>Additionally, <link href="http://developer.apple.com/xcode">XCode</link> is required. The driver can then be installed by following the directions for <link xref="installing#build-yourself">building from source</link>.</p>
  </section>

  <section id="building-windows">
    <info><link type="guide" xref="index#installation" /></info>
    <title>Building on Windows</title>

    <p>Building on Windows requires Windows Vista or newer and Visual Studio 2010 or newer. Additionally, <code>cmake</code> is required to generate Visual Studio project files.</p>

    <p>Let's start by generating Visual Studio project files for libbson, a dependency of the C driver. The following assumes we are compiling for 64-bit Windows using Visual Studio 2015 Express, which can be freely downloaded from Microsoft.</p>

    <screen>cd mongo-c-driver-@MONGOC_RELEASED_VERSION@\src\libbson
cmake -G "Visual Studio 14 2015 Win64" "-DCMAKE_INSTALL_PREFIX=C:\mongo-c-driver"</screen>

    <p>(Run <code>cmake -LH .</code> for a list of other options.)</p>
    <p>Now that we have project files generated, we can either open the project in Visual Studio or compile from the command line. Let's build using the command line program <code>msbuild.exe</code></p>

    <screen>msbuild.exe ALL_BUILD.vcxproj</screen>

    <p>Now that libbson is compiled, let's install it using msbuild. It will be installed to the path specified by <code>CMAKE_INSTALL_PREFIX</code>.</p>

    <screen>msbuild.exe INSTALL.vcxproj</screen>

    <p>You should now see libbson installed in <code>C:\mongo-c-driver</code></p>.

    <p>Now let's do the same for the MongoDB C driver.</p>

    <screen>cd mongo-c-driver-@MONGOC_RELEASED_VERSION@
cmake -G "Visual Studio 14 2015 Win64" "-DCMAKE_INSTALL_PREFIX=C:\mongo-c-driver" "-DBSON_ROOT_DIR=C:\mongo-c-driver"
msbuild.exe ALL_BUILD.vcxproj
msbuild.exe INSTALL.vcxproj</screen>


    <p>All of the MongoDB C Driver's components will now be found in <code>C:\mongo-c-driver</code>.</p>

    <section id="nativetls-windows">
      <title>Native TLS Support on Windows (Secure Channel)</title>
      <p>
	The MongoDB C Driver supports the Windows native TLS and crypto libraries.
	Using the native libraries there is no need to install OpenSSL. By
	default however, the driver will compile against OpenSSL if it
	detects it being available. If OpenSSL is not available, it will
	fallback on the native libraries.
      </p>
      <p>
	To compile against the Windows native TLS and crypto libraries, even when
	OpenSSL is available, configure the driver like so:
      </p>
      <screen>cmake -G "Visual Studio 14 2015 Win64" "-DENABLE_SSL=WINDOWS" "-DCMAKE_INSTALL_PREFIX=C:\mongo-c-driver" "-DBSON_ROOT_DIR=C:\mongo-c-driver"</screen>
    </section>
  </section>

</page>
